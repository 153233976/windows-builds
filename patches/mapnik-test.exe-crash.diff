diff --git a/test/unit/core/copy_move_test.cpp b/test/unit/core/copy_move_test.cpp
index 3b38ae7..99c4479 100644
--- a/test/unit/core/copy_move_test.cpp
+++ b/test/unit/core/copy_move_test.cpp
@@ -19,7 +19,6 @@ SECTION("layers") {
     {
         mapnik::Map m0(100,100);
         mapnik::Map m2(200,100);
-        mapnik::datasource_cache::instance().register_datasources("plugins/input/shape.input");
         mapnik::parameters p;
         p["type"]="shape";
         p["file"]="demo/data/boundaries";
diff --git a/test/unit/core/exceptions_test.cpp b/test/unit/core/exceptions_test.cpp
index b3492d1..9f27455 100644
--- a/test/unit/core/exceptions_test.cpp
+++ b/test/unit/core/exceptions_test.cpp
@@ -62,7 +62,6 @@ SECTION("handling") {
     std::string csv_plugin("./plugins/input/csv.input");
     if (mapnik::util::exists(csv_plugin)) {
         try {
-            mapnik::datasource_cache::instance().register_datasource(csv_plugin);
             mapnik::parameters p;
             p["type"]="csv";
             p["inline"]="x,y\n0,0";
@@ -88,7 +87,6 @@ SECTION("handling") {
     std::string shape_plugin("./plugins/input/shape.input");
     if (mapnik::util::exists(shape_plugin)) {
         try {
-            mapnik::datasource_cache::instance().register_datasource(shape_plugin);
             mapnik::parameters p2;
             p2["type"]="shape";
             p2["file"]="foo";
diff --git a/test/unit/imaging/image_painted_test.cpp b/test/unit/imaging/image_painted_test.cpp
index b567d5e..80c5e05 100644
--- a/test/unit/imaging/image_painted_test.cpp
+++ b/test/unit/imaging/image_painted_test.cpp
@@ -17,7 +17,6 @@ SECTION("painting") {
 
     try
     {
-        datasource_cache::instance().register_datasources("plugins/input/csv.input");
 
         Map m(256, 256);
 
diff --git a/test/unit/run.cpp b/test/unit/run.cpp
index 74b0715..3f3e4f4 100644
--- a/test/unit/run.cpp
+++ b/test/unit/run.cpp
@@ -4,6 +4,7 @@
 #include <libxml/parser.h> // for xmlInitParser(), xmlCleanupParser()
 #include <cairo.h>
 #include <unicode/uclean.h>
+#include <mapnik/datasource_cache.hpp>
 
 #ifdef MAPNIK_USE_PROJ4
 #include <proj_api.h>
@@ -11,6 +12,7 @@
 
 int main (int argc, char* const argv[])
 {
+    mapnik::datasource_cache::instance().register_datasources("plugins/input/");
     int result = Catch::Session().run( argc, argv );
     // only call this once, on exit
     // to make sure valgrind output is clean
